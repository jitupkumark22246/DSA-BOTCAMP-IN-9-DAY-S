#include <stdio.h>
#include <stdlib.h>

#define MAX 5  


struct Queue {
    int items[MAX];
    int front;
    int rear;
};


void initialize(struct Queue* q) {
    q->front = -1;
    q->rear = -1;
}


int isFull(struct Queue* q) {
    return q->rear == MAX - 1;
}


int isEmpty(struct Queue* q) {
    return q->front == -1 || q->front > q->rear;
}


void enqueue(struct Queue* q, int value) {
    if (isFull(q)) {
        printf("Queue is full! Cannot enqueue %d\n", value);
    } else {
        if (q->front == -1) {
            q->front = 0;
        }
        q->rear++;
        q->items[q->rear] = value;
        printf("%d enqueued to queue\n", value);
    }
}


int dequeue(struct Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is empty! Cannot dequeue.\n");
        return -1;
    } else {
        int value = q->items[q->front];
        q->front++;
        if (q->front > q->rear) {  // Reset the queue if it becomes empty
            q->front = q->rear = -1;
        }
        return value;
    }
}


int peek(struct Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is empty! No front element.\n");
        return -1;
    } else {
        return q->items[q->front];
    }
}


void display(struct Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is empty!\n");
    } else {
        printf("Queue elements: ");
        for (int i = q->front; i <= q->rear; i++) {
            printf("%d ", q->items[i]);
        }
        printf("\n");
    }
}

// Driver code
int main() {
    struct Queue q;
    initialize(&q);

    enqueue(&q, 10);
    enqueue(&q, 20);
    enqueue(&q, 30);
    enqueue(&q, 40);
    enqueue(&q, 50);

    display(&q);

    printf("Dequeued: %d\n", dequeue(&q));
    printf("Dequeued: %d\n", dequeue(&q));

    display(&q);

    printf("Front element is %d\n", peek(&q));

    enqueue(&q, 60);  // Trying to enqueue when the queue is full

    return 0;
}
